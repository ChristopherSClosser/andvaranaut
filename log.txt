#pragma once

typedef struct
{
    int xres;
    int yres;
    float scale;
    int fps;
}
Args;

Args xparse(const int argc, const char* argv[]);
#pragma once

#include "Point.h"

typedef enum
{
    E, SE, S, SW, W, NW, N, NE, DIRS
}
Compass;

bool xinverted(const Compass face);

Compass xneedle(const Point where, const Point other);
#pragma once

#include "Sdl.h"

typedef struct
{
    uint32_t* pixels;
    int width;
}
Display;

Display xlock(const Sdl sdl);

void xunlock(const Sdl sdl);
#pragma once

#include "Map.h"
#include "Hero.h"

typedef struct
{
    float** mesh;
    int rows;
    int cols;
    float anti;
    int res;
}
Field;

void xdiffuse(const Field field, const Point where);

Field xprepare(const Map map);

Point xforce(const Field field, const Point from, const Point to);

void xexamine(const Field field);

void xdeposit(const Field field, const Point p, const float val);

void xruin(const Field field);
#pragma once

typedef enum
{
    A, B,
    FRAMES
}
Frame;
#pragma once

#include "Line.h"
#include "Torch.h"
#include "Ray.h"
#include "Map.h"
#include "Input.h"

#include <stdbool.h>

typedef struct
{
    Line fov;
    Point where;
    Point velocity;
    float speed;
    float acceleration;
    float theta;
    Torch torch;
    float arm;
    int floor;
    float scent;
}
Hero;

Hero xspawn(const float scale);

Point xtouch(const Hero hero, const float reach);

Ray xcast(const Hero hero, char** const block, const Point column, const int yres);

bool xteleporting(const Hero hero, const Map map, const Input input, const int ticks);

Hero xteleport(const Hero hero, const Map map);

Hero xsustain(const Hero hero, const Map map, const Input input);
#pragma once

#include "Point.h"
#include "Compass.h"

typedef struct
{
    int surface;
    float offset;
    Point where;
    Compass facing;
}
Hit;

Hit xmarch(const Point where, const Point direction, char** const walling);
#pragma once

#include <stdint.h>

typedef struct
{
    // Keyboard state
    const uint8_t* key;
    // Mouse sensitivity
    float sx;
    float sy;
    // Mouse deltas
    int dx;
    int dy;
    // Mouse Left, middle, right button state
    int l;
    int m;
    int r;
}
Input;

Input xpump(Input input);

Input xready();
#pragma once

#include "Point.h"

typedef struct
{
    Point a;
    Point b;
}
Line;

// Return a line rotated t radians around the origin
Line xrotate(const Line line, const float t);

// Returns a point on a line by some percentage n (linear interpolation)
Point xlerp(const Line line, const float n);

// Returns the focal ratio of a line
float xfocal(const Line line);

// Returns the percentage of a line given screen resolution,
// screen x coordinate, normal vector distance xx from the player
// to the point of interest, and player field of view
float xfcast(const Line fov, const int yres, const int x, const float xx);
#pragma once

#include "Point.h"

#include <stdbool.h>

typedef struct
{
    char** ceiling;
    char** walling;
    char** floring;
    int rows;
    int cols;
}
Map;

Map xopen(const int level);

void xclose(const Map map);

Map xreopen(const Map map, const int level);

bool xisportal(const Map map, const Point where);
#pragma once

#include <stdbool.h>

typedef struct
{
    float x;
    float y;
}
Point;

// Returns a point rotated about the origin by t radians
Point xtrn(const Point a, const float t);

// Returns a point rotated about the origin by right angle degrees
Point xrag(const Point a);

// Returns the subtraction of two points (a - b)
Point xsub(const Point a, const Point b);

// Returns the addition of two points (a + b)
Point xadd(const Point a, const Point b);

// Returns the multiplication of a point by a scalar (a * n)
Point xmul(const Point a, const float n);

// Returns the magnitude of a point
float xmag(const Point a);

// Returns the division of a point by a scalar (a / n)
Point xdvd(const Point a, const float n);

// Returns the unit vector of a point relative to (0, 0)
Point xunt(const Point a);

// Returns the slope of a point relative to (0, 0)
float xslp(const Point a);

// Shifts a point horizontally on a grid along a vector of point b and (0, 0)
Point xshr(const Point a, const Point b);

// Shifts a point vertically on a grid along a vector of point b and (0, 0)
Point xsvr(const Point a, const Point b);

// Returns a point snapped to the middle of a grid
Point xmid(const Point a);

// Returns true if a point is infinitly far away from the (0, 0)
bool xinf(const Point a);

// Returns b if b is closer to a, else c
Point xcmp(const Point a, const Point b, const Point c);

// Returns true if a is within b with some epsilon width
bool xeql(const Point a, const Point b, const float e);

// Returns the block at point a
int xblok(const Point a, char** const blocks);

// Returns the tile number at point a
int xtile(const Point a, char** const blocks);
#pragma once

#include "Line.h"

typedef struct
{
    int bot;
    int top;
    struct
    {
        int bot;
        int top;
    }
    clamped;
    int height;
}
Projection;

Projection xproject(const int yres, const Line fov, const Point corrected);
#pragma once

#include "Traceline.h"
#include "Projection.h"
#include "Hit.h"

typedef struct
{
    Traceline traceline;
    Projection projection;
    Hit hit;
}
Ray;
#pragma once

#include "Display.h"

typedef struct
{
    Sdl sdl;
    Display display;
    // Scanlines are rotated 90 degrees. An x argument would be passed here
    int y;
}
Scanline;

void xrend(const Scanline sl, const Ray ray, Point* wheres, const Map m, const Torch t, int* moddings);
#pragma once

#include "Textures.h"
#include "Sprites.h"
#include "SDL2/SDL.h"

typedef struct
{
    SDL_Window* window;
    SDL_Renderer* renderer;
    SDL_Texture* texture;
    int xres;
    int yres;
    int fps;
    Surfaces surfaces;
    Textures textures;
}
Sdl;

Sdl setup(const int xres, const int yres, const int fps);

void release(const Sdl sdl);

// Renders one one frame with SDL using hero, sprite, and map data. Ticks determine animation
void render(const Sdl sdl, const Hero hero, const Sprites sprites, const Map map, const int ticks);
#pragma once

#include "Hero.h"
#include "State.h"

typedef struct
{
    Point where;
    int ascii;
    State state;
    int transparent;
    float width;
    int dead;
    int moveable;
    Point last;
    Point velocity;
    float speed;
    float acceleration;
}
Sprite;

typedef struct
{
    Sprite* sprite;
    int count;
    int max;
}
Sprites;

Sprites xwake(const int level);

void xkill(const Sprites sprites);

Sprites xrewake(const Sprites sprites, const int level);

Sprites xorient(const Sprites sprites, const Hero hero);

void xcaretake(const Sprites sprites, const Hero hero, const Input input, const Map map);
#pragma once

typedef enum
{
    // In hot pursuit of the player
    CHASING,
    // Grabbed by the player
    GRABBED,
    // Sprite is doing nothing
    IDLE,
    // Number of states present
    STATES
}
State;
#pragma once

#include "SDL2/SDL.h"

typedef struct
{
    SDL_Surface** surface;
    int count;
}
Surfaces;

Surfaces xpull(const uint32_t format);

void xclean(const Surfaces surfaces);
#pragma once

#include "Surfaces.h"

typedef struct
{
    SDL_Texture** texture;
    int count;
}
Textures;

Textures xcache(const Surfaces surfaces, SDL_Renderer* const renderer);

void xpurge(const Textures textures);
#pragma once

typedef struct
{
    float light;
    float brightness;
    float dlight;
}
Torch;

int xilluminate(const Torch torch, const float distance);

Torch xburn(const Torch torch);

Torch xout();
#pragma once

#include "Line.h"

typedef struct
{
    Line trace;
    Point corrected;
    Line fov;
}
Traceline;
#pragma once

#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <stdlib.h>
#include <limits.h>

// Fast math floor
int xfl(const float x);

// Fast math ceil
int xcl(const float x);

// Fast math decimal
float xdec(const float x);

// Returns the number of lines in a file
int xlns(FILE* const file);

// Returns a line from a file - forwards file pointer
char* xreadln(FILE* const file);

// Prints an error message and exits
void xbomb(const char* const message, ...);

// Returns true if number is odd
bool xodd(const int a);

// Makes a number even
int xbalance(const int a);

// Takes two strings and returns a concatenated string
char* xconcat(const char* const a, const char* const b);

// Prints the license
void xlicense();

// Get the lenght of an array
#define xlen(a) ((int) (sizeof(a) / sizeof(*a)))

// Type safe ease of use calloc
#define xwipe(t, n) ((t*) calloc((n), sizeof(t)))

// Type safe ease of use malloc
#define xtoss(t, n) ((t*) malloc((n) * sizeof(t)))

// Type safe ease of use realloc
#define xretoss(ptr, t, n) (ptr = (t*) realloc((ptr), (n) * sizeof(t)))

// Ease of use memset for zeroing out an array
#define xzero(a) (memset(&(a), 0, sizeof(a)))

// Generic type macro for finding max of two type values
#define xmax(a, b) ((a) > (b) ? (a) : (b))

// Generic type macro for finding min of two type values
#define xmin(a, b) ((a) < (b) ? (a) : (b))

// Misc constants
enum
{
    // Minimum array size needed for an integer to be converted to a string
    MINTS = (CHAR_BIT * sizeof(int) - 1) / 3 + 2
};
